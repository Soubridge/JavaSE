
Park（挂起）
LockSupport的静态方法，LockSupport.park(),只能在某个线程体中使用,在其他线程体中终止挂起LockSupport.unpark(thread);
Park和Wait的区别：虽然两个都会让线程停止运行，但还是有很大的区别
       ①作用：park只是单纯的让线程暂时挂起，后续其他线程unpark还可以救回来、wait是把对象锁交出去，这涉及到线程安全的问题
       ②使用位置：wait只能在同步代码内且只能调用这个同步代码对象锁的wait，而park只需要在方法体中调用即可
       ③中断：wait时被中断会抛异常，且中断状态为false，park时中断是可以正常中断成功的

/**
 * New: 线程被创建还未.start()
 * Runnable: 可运行状态(此刻正运行 or 只要拿到时间片就可运行)
 * Blocked: Runnable->Blocked(线程拿到时间片了，但被锁对象权不在自己手里，故状态改变)，Blocked->Runnable(有锁权的线程调用了锁对象.wait把对象锁交出来，正好被自己拿到了)
 *          若有锁权的线程wait了，会有一众的Blocked状态的线程竞争锁权，只有拿到锁对象权的才会变回Runnable状态
 * Waiting: ①Object.class.wait(不带时间版) ②thread.join(不带时间版) ③LockSupport.park()
 *          ①wait不带时间，先当于把锁对象权让出去了，自己是Waiting状态，比Bocked优先级还低，只能是有某个有锁对象权的用.notify给它从Wait改成Blocked，参与拿锁权竞争
 *          ②thread.join(),让thread先运行完本线程由Waiting->Runnable，如果join在同步代码块中进行，也是会释放锁的，不过释放的特制thread.join()中的对象thread的锁权【注意：如果锁thread.join的和thread中的锁是相同的锁，且不是thread，这个锁不会被释放且死锁死锁】
 *          ③LockSupport.park() 线程体内运行LockSupport.park()时，线程由Runnable->Waiting，在其他线程执行LockSupport.unpark(thread)时，由Waiting->Runnable
 * Timed Waiting: ①Object.class.wait(带时间版) ②Thread.sleep(默认带时间) ③Thread.join(带时间版)
 *                进入Timed Waiting状态，需要等待时间结束等系统自动唤醒
 * Terminated:线程体运行完成 or 异常终止
 * */